=========================
Command with no arguments
=========================
cat
---
(program
  (command_call
    (command_name)))

==============================
Command with literal arguments
==============================
echo "foo" bar 12
---
(program
  (command_call
    (command_name)
    (string)
    (word)
    (number)))

==============================
Command parameter with # in it
==============================
echo not#comment
---
(program
 (command_call
  (command_name)
  (word)))
==================
Multiline commands
==================
... find /bin               # traverse this directory and
    -type f -a -executable  # print executable files
  | sort -r                 # reverse sort
  | head -n 30              # limit to 30 files
  ;
---
(program
  (multiline_command_call
    (command_name)
    (word)
    (comment)
    (word)
    (word)
    (word)
    (word)
    (comment)
    (command_name)
    (word)
    (comment)
    (command_name)
    (word)
    (number)
    (comment)))
============
Call builtin
============
call myplace->setValue(42)
---
(program
  (expression_mode
    (variable_name)
    (method_call
      (function_name
        (variable_name))
      (number))))
=========
Expansion
=========
echo $? $* $#
---
(program
  (command_call
    (command_name)
    (expansion
      (variable_name))
    (expansion
      (variable_name))
    (expansion
      (variable_name))))
=======================================
Expansion in command with default value
=======================================
echo ${not_defined:-'default'}
---
(program
  (command_call
    (command_name)
    (expansion
      (variable_name)
      (string))))
=======================================
Invalid expansion
:error
=======================================
echo $ myvar
---
=======================================
Command call with positional, typed arg
=======================================
pp value ([1, 2])
---
(program
  (command_call
    (command_name)
    (word)
    (parameter_list_call
      (list
        (number)
        (number)))))
=============================
Command call with value.Place
=============================
json read (&mydict)
---
(program
  (command_call
    (command_name)
    (word)
    (parameter_list_call
      (unary_expression
        (variable_name)))))
============
Array splice
============
write @foods
---
(program
  (command_call
    (command_name)
    (expansion
      (variable_name))))
=====
Pipes
=====
cat myfile.csv | cut -d" " -f2 | sort | uniq
---
(program
  (chain_statement
    (chain_statement
      (chain_statement
        (command_call
          (command_name)
          (word))
        (command_call
          (command_name)
          (word)
          (string)
          (word)))
      (command_call
        (command_name)))
    (command_call
      (command_name))))
========================
Prefix environment value
========================
PYTHONPATH=vendor python3
MYENV= echo noop
PATH="$PATH:/usr/local/bin" mycmd
---
(program
  (command_call
    (environment
      (variable_name)
      (word))
    (command_name))
  (command_call
    (environment
      (variable_name))
    (command_name)
    (word))
  (command_call
    (environment
      (variable_name)
      (string
        (expansion
          (variable_name))))
    (command_name)))
===========
Redirection
===========
echo hi > tmp.txt
ls 2> errors.txt
sort < tmp.txt
ls /tmp 2>errors.txt
echo 'fatal error' >&2
json write > foo.json ({x: 42})
json read (&mydict) < foo.json
---
(program
  (command_call
    (command_name)
    (word)
    (redirection
      (word)))
  (command_call
    (command_name)
    (redirection
      (number)
      (word)))
  (command_call
    (command_name)
    (redirection
      (word)))
  (command_call
    (command_name)
    (word)
    (redirection
      (number)
      (word)))
  (command_call
    (command_name)
    (string)
    (redirection
      (number)))
  (command_call
    (command_name)
    (word)
    (redirection
      (word))
    (parameter_list_call
      (dict
        (variable_name)
        (number))))
  (command_call
    (command_name)
    (word)
    (parameter_list_call
      (unary_expression
        (variable_name)))
    (redirection
      (word))))
