===========================
Simple function declaration
===========================
func foo() {
  var x = ''
}
---
(program
  (function_definition
    (function_name
      (variable_name))
    (parameter_list)
    (func_block
      (variable_declaration
        (variable_name)
        (string)))))
===========================
Positional parameter
===========================
func foo(bar, foobar) {
  var x = ''
}
---
(program
  (function_definition
    (function_name
      (variable_name))
    (parameter_list
      (function_parameter
        (variable_name))
      (function_parameter
        (variable_name)))
    (func_block
      (variable_declaration
        (variable_name)
        (string)))))
===========================
Complex function
===========================
func f(p1, p2, ...rest_pos; n1=42, n2='foo', ...rest_named) {
    var x = ''
}
---
(program
  (function_definition
    (function_name
      (variable_name))
    (parameter_list
      (function_parameter
        (variable_name))
      (function_parameter
        (variable_name))
      (rest_of_arguments
        (variable_name))
      (named_parameter
        (function_parameter
          (variable_name))
        (number))
      (named_parameter
        (function_parameter
          (variable_name))
        (string))
      (rest_of_arguments
            (variable_name)))
        (func_block
          (variable_declaration
            (variable_name)
            (string)))))
============================
Catch all as single argument
============================
func f(...rest_pos) { echo worked }
---
(program
  (function_definition
    (function_name
      (variable_name))
    (parameter_list
      (rest_of_arguments
        (variable_name)))
    (func_block
      (command_call
        (command_name
          (word))
        (word)))))
=======================================
Func call with word and named arguments
=======================================
call myRepeat('z', 3, special=true)
---
(program
  (expression_mode
    (function_call
      (function_name
        (variable_name))
      (string)
      (number)
      (named_parameter
        (function_parameter
          (variable_name))
        (boolean)))))
======================
Proc definitions
======================
proc -my-func {
	echo here
}
proc my_func2 { echo here;
	echo here
}

proc myfunc3 { echo here
	echo here again;
}

proc inline { echo inline! }

proc inline2 { echo inline again; }
---
(program
  (proc_definition
    (proc_name)
    (proc_block
      (command_call
        (command_name
          (word))
        (word))))
  (proc_definition
    (proc_name)
    (proc_block
      (command_call
        (command_name
          (word))
        (word))
      (command_call
        (command_name
          (word))
        (word))))
  (proc_definition
    (proc_name)
    (proc_block
      (command_call
        (command_name
          (word))
        (word))
      (command_call
        (command_name
          (word))
        (word)
        (word))))
  (proc_definition
    (proc_name)
    (proc_block
      (command_call
        (command_name
          (word))
        (word))))
  (proc_definition
    (proc_name)
    (proc_block
      (command_call
        (command_name
          (word))
        (word)
        (word)))))
=======================
Proc with complex block
=======================
proc serve {
	setup
	... dist/shttp -port 5432 -- $0
		'GET /{$} list-todos'
		'POST /todo add-todo'
		'DELETE /todo/{id} delete-todo'
		;
}
---
(program
  (proc_definition
    (proc_name)
    (proc_block
      (command_call
        (command_name
          (word)))
      (multiline_command_call
        (command_name
          (word))
        (word)
        (number)
        (word)
        (expansion
          (variable_name))
        (string)
        (string)
        (string)))))
